name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  tags:
    - "*"

# 设置权限，用于发布 Release
permissions:
  contents: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    timeout-minutes: 30

    strategy:
      matrix:
        xcode: ['15.2']
        configuration: ['Debug', 'Release']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode }}

    - name: Setup Ruby for Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true

    - name: Cache SwiftPM dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Run SwiftLint
      run: |
        if [ -f .swiftlint.yml ]; then
          brew install swiftlint
          swiftlint
        fi

    - name: Build and Test
      uses: mxcl/xcodebuild@v3
      with:
        xcode: ${{ matrix.xcode }}
        platform: iOS
        action: test
        configuration: ${{ matrix.configuration }}
        code-coverage: true
        scheme: MiniDemo # 使用你的项目 scheme 名称
        warnings-as-errors: true

    - name: Archive Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.configuration }}
        path: |
          build/reports
          *.xcresult
        retention-days: 5

    - name: Upload Code Coverage
      if: matrix.configuration == 'Debug'
      uses: codecov/codecov-action@v4
      with:
        xcode: true
        xcode_scheme: MiniDemo # 使用你的项目 scheme 名称

  deploy:
    name: Deploy to TestFlight
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Provisioning
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # 创建临时 keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain

        # 导入证书
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

        # 设置 provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

    - name: Build for Release
      uses: mxcl/xcodebuild@v3
      with:
        platform: iOS
        action: build
        configuration: Release
        scheme: MiniDemo # 使用你的项目 scheme 名称

    - name: Upload to TestFlight
      if: success()
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: build/MiniDemo.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/MiniDemo.ipa
        generate_release_notes: true

